/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.avro.entity;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"com.avro.entity\",\"fields\":[{\"name\":\"id\",\"type\":[\"int\",\"null\"]},{\"name\":\"fName\",\"type\":\"string\"},{\"name\":\"lName\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.Integer id;
  @Deprecated public java.lang.CharSequence fName;
  @Deprecated public java.lang.CharSequence lName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public User() {}

  /**
   * All-args constructor.
   */
  public User(java.lang.Integer id, java.lang.CharSequence fName, java.lang.CharSequence lName) {
    this.id = id;
    this.fName = fName;
    this.lName = lName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return fName;
    case 2: return lName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Integer)value$; break;
    case 1: fName = (java.lang.CharSequence)value$; break;
    case 2: lName = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Integer getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Integer value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'fName' field.
   */
  public java.lang.CharSequence getFName() {
    return fName;
  }

  /**
   * Sets the value of the 'fName' field.
   * @param value the value to set.
   */
  public void setFName(java.lang.CharSequence value) {
    this.fName = value;
  }

  /**
   * Gets the value of the 'lName' field.
   */
  public java.lang.CharSequence getLName() {
    return lName;
  }

  /**
   * Sets the value of the 'lName' field.
   * @param value the value to set.
   */
  public void setLName(java.lang.CharSequence value) {
    this.lName = value;
  }

  /** Creates a new User RecordBuilder */
  public static com.avro.entity.User.Builder newBuilder() {
    return new com.avro.entity.User.Builder();
  }
  
  /** Creates a new User RecordBuilder by copying an existing Builder */
  public static com.avro.entity.User.Builder newBuilder(com.avro.entity.User.Builder other) {
    return new com.avro.entity.User.Builder(other);
  }
  
  /** Creates a new User RecordBuilder by copying an existing User instance */
  public static com.avro.entity.User.Builder newBuilder(com.avro.entity.User other) {
    return new com.avro.entity.User.Builder(other);
  }
  
  /**
   * RecordBuilder for User instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
    implements org.apache.avro.data.RecordBuilder<User> {

    private java.lang.Integer id;
    private java.lang.CharSequence fName;
    private java.lang.CharSequence lName;

    /** Creates a new Builder */
    private Builder() {
      super(com.avro.entity.User.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.avro.entity.User.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fName)) {
        this.fName = data().deepCopy(fields()[1].schema(), other.fName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lName)) {
        this.lName = data().deepCopy(fields()[2].schema(), other.lName);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing User instance */
    private Builder(com.avro.entity.User other) {
            super(com.avro.entity.User.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.fName)) {
        this.fName = data().deepCopy(fields()[1].schema(), other.fName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lName)) {
        this.lName = data().deepCopy(fields()[2].schema(), other.lName);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Integer getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.avro.entity.User.Builder setId(java.lang.Integer value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.avro.entity.User.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'fName' field */
    public java.lang.CharSequence getFName() {
      return fName;
    }
    
    /** Sets the value of the 'fName' field */
    public com.avro.entity.User.Builder setFName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.fName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'fName' field has been set */
    public boolean hasFName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'fName' field */
    public com.avro.entity.User.Builder clearFName() {
      fName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'lName' field */
    public java.lang.CharSequence getLName() {
      return lName;
    }
    
    /** Sets the value of the 'lName' field */
    public com.avro.entity.User.Builder setLName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.lName = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'lName' field has been set */
    public boolean hasLName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'lName' field */
    public com.avro.entity.User.Builder clearLName() {
      lName = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public User build() {
      try {
        User record = new User();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
        record.fName = fieldSetFlags()[1] ? this.fName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lName = fieldSetFlags()[2] ? this.lName : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
